#!/bin/sh
#####################################################-*-mode:shell-script-*-
##                                                                       ##
##                                                                       ##
##                  Language Technologies Institute                      ##
##                     Carnegie Mellon University                        ##
##                      Copyright (c) 1998-2004                          ##
##                        All Rights Reserved.                           ##
##                                                                       ##
##  Permission is hereby granted, free of charge, to use and distribute  ##
##  this software and its documentation without restriction, including   ##
##  without limitation the rights to use, copy, modify, merge, publish,  ##
##  distribute, sublicense, and/or sell copies of this work, and to      ##
##  permit persons to whom this work is furnished to do so, subject to   ##
##  the following conditions:                                            ##
##   1. The code must retain the above copyright notice, this list of    ##
##      conditions and the following disclaimer.                         ##
##   2. Any modifications must be clearly marked as such.                ##
##   3. Original authors' names are not deleted.                         ##
##   4. The authors' names are not used to endorse or promote products   ##
##      derived from this software without specific prior written        ##
##      permission.                                                      ##
##                                                                       ##
##  CARNEGIE MELLON UNIVERSITY AND THE CONTRIBUTORS TO THIS WORK         ##
##  DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING      ##
##  ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT   ##
##  SHALL CARNEGIE MELLON UNIVERSITY NOR THE CONTRIBUTORS BE LIABLE      ##
##  FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    ##
##  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN   ##
##  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,          ##
##  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF       ##
##  THIS SOFTWARE.                                                       ##
##                                                                       ##
###########################################################################

FESTIVAL=festival

if [ $# = 0 ]
then
   $0 cummulate
   $0 align
   $0 traintest
   $0 build
   #$0 merge
   $0 merge2
   #$0 test
   #$0 wfst
   #$0 code
   #$0 distcode
   exit
fi


if [ "$1" = "cummulate" ]
then

   if [ ! -f "lex_entries.out" ]
   then
        echo "can't find lex_entries.out"
        exit
   fi

   echo Find probabilities of letter-phone pairs
   $FESTIVAL -b allowables.scm '(begin
       (cummulate-pairs "lex_entries.out")
       (save-table "lts_scratch/lex-") )'
fi


if [ "$1" = "align" ]
then

   echo Align letter-phone pairs with best path
   $FESTIVAL -b allowables.scm lts_scratch/lex-pl-tablesp.scm '(begin
      (aligndata "lex_entries.out" "lts_scratch/lex.align")
      (build-feat-file "lts_scratch/lex.align" "lts_scratch/lex.feats"))' |
      tee align.log
fi

if [ "$1" = "traintest" ]
then
   echo "Split into training and test sets"
   $FESTVOXDIR/src/general/traintest lts_scratch/lex.align
   $FESTIVAL -b  allowables.scm lts_scratch/lex-pl-tablesp.scm '(begin
      (build-feat-file "lts_scratch/lex.align.train" "lts_scratch/lex.feats.train"))'
fi


if [ "$1" = "build" ]
then

   echo Build letter to phone CART trees
   if [ -f lts_scratch/lex.align.train ]
   then
        echo "With traintest split"
   fi
   (cd lts_scratch; 
echo "((Relation.LTS.down.name" >ltsLTS.desc
awk '{print $1}' lex.feats | sort -u >> ltsLTS.desc
echo ') (p.p.p.p.name ignore ' >>ltsLTS.desc
awk '{print $2}' lex.feats | sort -u >> ltsLTS.desc
echo ') (p.p.p.name ' >>ltsLTS.desc
awk '{print $3}' lex.feats | sort -u >> ltsLTS.desc
echo ') (p.p.name ' >>ltsLTS.desc
awk '{print $4}' lex.feats | sort -u >> ltsLTS.desc
echo ') (p.name ' >>ltsLTS.desc
awk '{print $5}' lex.feats | sort -u >> ltsLTS.desc
echo ') (name ' >>ltsLTS.desc
awk '{print $6}' lex.feats | sort -u >> ltsLTS.desc
echo ') (n.name ' >>ltsLTS.desc
awk '{print $7}' lex.feats | sort -u >> ltsLTS.desc
echo ') (n.n.name ' >>ltsLTS.desc
awk '{print $8}' lex.feats | sort -u >> ltsLTS.desc
echo ') (n.n.n.name ' >>ltsLTS.desc
awk '{print $9}' lex.feats | sort -u >> ltsLTS.desc
echo ') (n.n.n.n.name ignore' >>ltsLTS.desc
awk '{print $10}' lex.feats | sort -u >> ltsLTS.desc
echo ') (pos ignore' >>ltsLTS.desc
awk 'BEGIN {print "n"} {print $11}' lex.feats | sort -u >> ltsLTS.desc
echo '))' >>ltsLTS.desc
for i in `awk '{print $6}' lex.feats | sort -u`
do
   # Stop value for wagon
   STOP=3
   # Find training set for letter $i
   if [ -f lex.feats.train ]
   then 
      echo letter $i STOP $STOP TRAIN SET
      cat lex.feats.train |
       awk '{if ($6 == "'$i'") print $0}' >ltsdataTRAIN.$i.feats
   else
      echo letter $i STOP $STOP ALL
      cat lex.feats |
       awk '{if ($6 == "'$i'") print $0}' >ltsdataTRAIN.$i.feats
   fi
   wagon -data ltsdataTRAIN.$i.feats -test ltsdataTRAIN.$i.feats \
          -desc ltsLTS.desc -stop $STOP -output lts.$i.tree
done
    ) >lts_scratch/lts.build.out

fi

if [ "$1" = "merge" ]
then
   echo Build complete model
   (cd lts_scratch;
       $FESTIVAL -b ../allowables.scm '(begin
         (merge_models "lex_lts_rules" "lex_lts_rules.scm" allowables))')
   cp -p lts_scratch/lex_lts_rules.scm ./lex_lts_rules.scm
fi

if [ "$1" = "merge2" ]
then
   echo Build complete model
   (cd lts_scratch;
       $FESTIVAL --heap 4000000 -b ../allowables.scm -b ../lts_build.scm '(begin
         (merge_models "lex_lts_rules" "lex_lts_rules.scm" allowables))')
   cp -p lts_scratch/lex_lts_rules.scm ./lex_lts_rules.scm
fi

if [ "$1" = "test" ]
then
  echo Test model
  if [ -f lts_scratch/lex.align.test ]
  then
     $FESTIVAL -b allowables.scm lts_scratch/lex_lts_rules.scm '(lts_testset "lts_scratch/lex.align.test" lex_lts_rules)' | tee lts_test.log
     echo "with TEST set"
  else
     $FESTIVAL -b allowables.scm lts_scratch/lex_lts_rules.scm '(lts_testset "lts_scratch/lex.align" lex_lts_rules)' | tee lts_test.log
     echo "with ALL data -- no held out test set"
  fi
fi

if [ "$1" = "tidyup" ]
then
   rm -rf lts_scratch
fi

if [ "$1" = "wfst" ]
then
     festival -b ./make_lts_wfst.scm lex_lts_rules.scm '(lts_to_rg_to_wfst lex_lts_rules "wfst/")';  
fi

if [ "$1" = "code" ]
then
     festival -b ./make_lts.scm lex_lts_rules.scm "(ltsregextoC \"cmu\" lex_lts_rules \"wfst/\" \"c\" \"$2\")"; 
fi

if [ "$1" = "distcode" ]
then
     festival -b ./make_carts.scm lex_lts_rules.scm "(carttoC \"cmu\" lex_lts_rules \"c\")"; 
fi
